name: Main

on:
  push:
    branches: [ master, develop**, ci ]
    tags:
      - '*'
  pull_request:
    branches: [ master, develop** ]

jobs:

  build_and_test:
      runs-on: ${{ matrix.os }}

      strategy:
        fail-fast: false

        matrix:
          # Specify the exact Windows image because the CMake generator in the CI breaks when the image
          # updates (since Visual Studio is also updated at the same time).
          os: [ubuntu-latest, macos-latest, windows-2022]
          python-version: [3.9]
          cmake_flags: ['-DBUILD_TESTING=OFF', '-DBUILD_TESTING=ON -DCOVERAGE=ON']
          cmake_flags_extra: ['', '-DDFLOAT=ON', '-DDLONG=OFF', '-DEMBEDDED=1', '-DEMBEDDED=2', '-DPROFILING=OFF',
                              '-DCTRLC=OFF', '-DPRINTING=OFF', '-DALGEBRA=default', '-DALGEBRA=mkl']
          exclude:
            - cmake_flags: '-DBUILD_TESTING=ON -DCOVERAGE=ON'
              cmake_flags_extra: '-DEMBEDDED=1'
            - cmake_flags: '-DBUILD_TESTING=ON -DCOVERAGE=ON'
              cmake_flags_extra: '-DEMBEDDED=2'

          include:
            - os: ubuntu-latest
              cmake_generator: "Unix Makefiles"
            - os: macos-latest
              cmake_generator: "Unix Makefiles"
            - os: windows-2022
              cmake_generator: "Visual Studio 17 2022"

      defaults:
        run:
          # Required when using an activated conda environment in steps
          # See https://github.com/conda-incubator/setup-miniconda#IMPORTANT
          shell: bash -l {0}

      env:
        OSQP_BUILD_DIR_PREFIX: ${{ github.workspace }}/build

      steps:
        - uses: actions/checkout@v2
          with:
            lfs: false
            submodules: recursive

        - name: Set up conda
          uses: conda-incubator/setup-miniconda@v2
          with:
            auto-update-conda: true
            python-version: ${{ matrix.python-version }}

        # -----------------
        # OS-specific setup
        # -----------------
        - name: Setup (Linux)
          if: runner.os == 'Linux'
          run: |
            echo "LD_LIBRARY_PATH=$CONDA_PREFIX/lib" >> $GITHUB_ENV

        - name: Setup (macOS)
          if: runner.os == 'macOS'
          # Newer versions of MacOS effectively block DYLD_LIBRARY_PATH being set (System Integrity Protection)
          # Explicitly setting RPATH using `install_name_tool -add_rpath $CONDA_PREFIX/lib ./build/out/osqp_tester`
          #   doesn't work either.
          # Here we get around it by using a standard non-root location for .dylib files as a soft link
          run: |
            echo "DYLD_LIBRARY_PATH=$CONDA_PREFIX/lib" >> $GITHUB_ENV
            ln -s $CONDA_PREFIX/lib ~/lib
            brew install libomp

        - name: Setup (Windows)
          if: runner.os == 'Windows'
          run: |
            echo "$CONDA_PREFIX/Library/bin" >> $GITHUB_PATH
        # -----------------

        - name: Install python dependencies
          run: |
            conda install -c intel "mkl-devel<2022"
            conda install numpy scipy
            conda info
            conda list

        - name: Build
          run: |
            cmake -G "${{ matrix.cmake_generator }}" -S . -B $OSQP_BUILD_DIR_PREFIX ${{ matrix.cmake_flags }} ${{ matrix.cmake_flags_extra }}
            cmake --build $OSQP_BUILD_DIR_PREFIX

        # useful for inspecting the OSQP version information
        - name: OSQP Demo
          run: |
            $OSQP_BUILD_DIR_PREFIX/out/osqp_demo
          if: ${{ !contains(matrix.cmake_flags_extra, 'EMBEDDED') }}

        - name: Test
          run: |
            $OSQP_BUILD_DIR_PREFIX/out/osqp_tester
          if: ${{ matrix.cmake_flags == '-DBUILD_TESTING=ON -DCOVERAGE=ON' }}

        - name: Codegen compilation test
          run: |
            cmake -G "${{ matrix.cmake_generator }}" -S tests/codegen/settings -B tests/codegen/settings/build -DOSQP_BUILD_DIR=$OSQP_BUILD_DIR_PREFIX -DOSQP_TEST_CODEGEN_DIR=$OSQP_BUILD_DIR_PREFIX/tests/testcodes
            cmake --build tests/codegen/settings/build
            ./tests/codegen/settings/build/osqp_codegen_embedded_mode1_settings
            ./tests/codegen/settings/build/osqp_codegen_embedded_mode2_settings
          if: ${{ runner.os == 'Linux' && matrix.cmake_flags == '-DBUILD_TESTING=ON -DCOVERAGE=ON' && matrix.cmake_flags_extra == '-DALGEBRA=default' }}

        - name: Valgrid check
          run: |
            sudo apt-get update
            sudo apt-get install valgrind
            valgrind --suppressions=.valgrind-suppress.supp --leak-check=full --gen-suppressions=all \
              --track-origins=yes --error-exitcode=1 $OSQP_BUILD_DIR_PREFIX/out/osqp_tester
          if: ${{ runner.os == 'Linux' && matrix.cmake_flags == '-DBUILD_TESTING=ON -DCOVERAGE=ON' && matrix.cmake_flags_extra == '-DALGEBRA=default' }}

        - name: Generate coverage
          uses: imciner2/run-lcov@v1
          with:
            input_directory: '${{ env.OSQP_BUILD_DIR_PREFIX }}'
            exclude: '"$GITHUB_WORKSPACE/tests/*" "$GITHUB_WORKSPACE/algebra/default/lin_sys/direct/amd/*" "$GITHUB_WORKSPACE/examples/*" "$GITHUB_WORKSPACE/build/*" "/usr/include/*"'
            output_file: '${{ env.OSQP_BUILD_DIR_PREFIX }}/coverage.info'
          if: ${{ runner.os == 'Linux' && matrix.cmake_flags == '-DBUILD_TESTING=ON -DCOVERAGE=ON' && matrix.cmake_flags_extra == '' }}

        - name: Coveralls
          uses: coverallsapp/github-action@master
          with:
            path-to-lcov: '${{ env.OSQP_BUILD_DIR_PREFIX }}/coverage.info'
            github-token: ${{ secrets.GITHUB_TOKEN }}
          if: ${{ runner.os == 'Linux' && matrix.cmake_flags == '-DBUILD_TESTING=ON -DCOVERAGE=ON' && matrix.cmake_flags_extra == '' }}
